@inherits LayoutComponentBase
@inject ILocalStorageService Storage
@inject AppStateManager AppState
@inject IApplicationInsights AppInsights

<div class="page">
    <div class="fixed w-full z-10 shadow-lg">
        <div class="relative dark:bg-gray-900 p-3">
            <div class="md:flex justify-between items-center">
                <div class="flex justify-start mr-4">
                    <span class="text-white type-monster text-2xl">Count Monster</span>
                </div>

                <nav class="md:flex items-center">
                    <div class="text-white mx-2 py-3 px-4 dark:bg-gray-600 rounded sm:mb-2 md:mb-0" title="Lifetime Total Time Tracked">
                        <svg xmlns="http://www.w3.org/2000/svg" class="mr-1 inline-block mb-1 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        @{
                            var totalTime = TimeSpan.FromSeconds(AppState.TrackedItems.Sum(m => m.TotalTimeLifetime().TotalSeconds));
                            <span>@(totalTime.ToString("dd\\:hh\\:mm\\:ss"))</span>
                        }
                    </div>

                    <div class="text-white mx-2 py-3 px-4 dark:bg-gray-600 rounded sm:mb-2 md:mb-0" title="Session Total Time Tracked">
                        <svg xmlns="http://www.w3.org/2000/svg" class="mr-1 inline-block mb-1 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        @{
                            var sessionTotalTime = TimeSpan.FromSeconds(AppState.TrackedItems.Sum(m => m.TotalTime().TotalSeconds));
                            <span>@(sessionTotalTime.ToString("dd\\:hh\\:mm\\:ss"))</span>
                        }
                    </div>

                    <div class="text-white mx-2 cursor-pointer py-3 px-4 dark:bg-gray-600 rounded sm:mb-2 md:mb-0" title="Current Timer">
                        @(_timeDelta.ToString("hh\\:mm\\:ss"))
                        <a @onclick="@(async () => { AppState.TimerBase = DateTimeOffset.Now; StateHasChanged(); })">
                            <svg xmlns="http://www.w3.org/2000/svg" class="ml-1 inline-block mb-1 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                            </svg>
                        </a>
                    </div>

                    <a class="inline-block py-3 px-4 bg-brand rounded text-white mx-2 cursor-pointer sm:block sm:mb-2 md:mb-0" @onclick="OnAddCardClicked">
                        <svg xmlns="http://www.w3.org/2000/svg" class="inline-block h-5 w-5 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        Add Counter
                    </a>

                    <a class="inline-block py-3 px-4 bg-brand rounded text-white mx-2 mr-0 cursor-pointer sm:block sm:mb-2 md:mb-0" @onclick="@(() => { _isInfoSlideOpen = true; })">
                        <svg xmlns="http://www.w3.org/2000/svg" class="inline-block h-5 w-5 mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        Info &amp; Help
                    </a>
                </nav>
            </div>

        </div>
    </div>
    <main class="pt-20">
        @Body
    </main>
</div>

@if (_isInfoSlideOpen)
{
    <Slide Title="Info & Support" CloseRequested="@(() => { _isInfoSlideOpen = false; })">
        <FormContent>
            <p>Looking for help? Please join my discord and look for the #count-monster channel.</p>
            <a href="https://discord.gg/ejB7YMm" class="w-full block my-3 bg-discord p-5 text-white rounded">
                <img class="inline-block" width="24" src="/img/discord-brands.svg" />
                Discord
            </a>

            <p>Did you know this project is open source? Get the code on github!</p>
            <a href="https://github.com/jsedlak/count-monster" class="w-full block my-3 bg-brand p-5 text-white rounded">
                <img class="inline-block" width="24" src="/img/github-brands.svg" />
                github
            </a>

            <p class="mt-10">
                Looking to support my work and help keep the servers alive? Consider subscribing to my twitch, or donating.
            </p>

            <a href="https://twitch.tv/krisc119" class="w-full block my-3 bg-twitch p-5 text-white rounded">
                <img width="24" src="/img/twitch-brands.svg" class="inline-block text-white" />
                Twitch
            </a>

            <a href="https://www.buymeacoffee.com/johnsedlak" class="w-full block my-3 bg-brand p-5 text-white rounded">
                <svg xmlns="http://www.w3.org/2000/svg" class="inline-block h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                Buy Me A Coffee (Donate)
            </a>

            <p class="mt-4 text-gray-600 text-sm">Version: 1.20211221.1</p>
        </FormContent>
    </Slide>
}

@if (AppState.IsInitialized && AppState.MetaData.LatestVersionRead < Constants.AppVersion)
{

    <Dialog Title="Welcome to Count Monster!" IsOpen=@_isReleaseNotesDialogOpen CloseRequested="OnCloseReleaseNotesRequested">
        <Content>
            <p class="leading-loose text-lg">
                Count Monster is a little app devoted to counting repetitive tasks while keeping track of some basic stats such as duration, or how often there was a comment made. You can add as many counters as you'd like, so why not get started!
            </p>

            <a class="block w-full p-3 bg-brand text-white text-center font-bold cursor-pointer rounded my-2" @onclick="OnCloseReleaseNotesRequested">Take Me To The App!</a>

            @{
                var release = Constants.Releases.FirstOrDefault(m => m.Version == Constants.AppVersion);

                if (release != null)
                {
                    <div class="my-3 rounded p-3 bg-gray-800">
                        <DynamicComponent Type=@(Type.GetType("CountMonster.Components.Notes." + release.NotesComponent)) />
                    </div>
                }
            }
        </Content>
    </Dialog>
}

@code {
    private TimeSpan _timeDelta = TimeSpan.FromSeconds(0);
    private Timer? _timer;
    private bool _isInfoSlideOpen = false;
    private bool _isReleaseNotesDialogOpen = true;

    protected override void OnInitialized()
    {
        _timer = new Timer((object? stateInfo) =>
        {
            _timeDelta = DateTimeOffset.Now - AppState.TimerBase;
            StateHasChanged();
        }, new AutoResetEvent(true), 1000, 1000);
    }


    private async void OnAddCardClicked()
    {
        var key = Guid.NewGuid().ToString();
        var title = $"Untitled {key.Substring(0, 8)}";

        var newCard = new TrackedItem { Title = title, Key = key };

        AppState.TrackedItems = AppState.TrackedItems.Union(new[] { newCard });
        await AppState.SaveAsync();

        await AppInsights.TrackEvent("MainLayout.AddCounter", new Dictionary<string, object?> { { "source", "MainLayout" } });
    }

    protected async void OnCloseReleaseNotesRequested()
    {
        Console.WriteLine("Close Requested");
        AppState.MetaData.LatestVersionRead = Constants.AppVersion;
        await AppState.SaveAsync();
    }
}